/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: esp_audiotest.proto */

#ifndef PROTOBUF_C_esp_5faudiotest_2eproto__INCLUDED
#define PROTOBUF_C_esp_5faudiotest_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Foo__IsOpen Foo__IsOpen;
typedef struct _Foo__Tips Foo__Tips;


/* --- enums --- */

typedef enum _Foo__IsOpen__IsOpenType {
  FOO__IS_OPEN__IS_OPEN_TYPE__null = 0,
  FOO__IS_OPEN__IS_OPEN_TYPE__open = 1,
  FOO__IS_OPEN__IS_OPEN_TYPE__close = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(FOO__IS_OPEN__IS_OPEN_TYPE)
} Foo__IsOpen__IsOpenType;
typedef enum _Foo__Tips__TipsType {
  FOO__TIPS__TIPS_TYPE__null = 0,
  FOO__TIPS__TIPS_TYPE__open_ok = 1,
  FOO__TIPS__TIPS_TYPE__open_err = 2,
  FOO__TIPS__TIPS_TYPE__close_ok = 3,
  FOO__TIPS__TIPS_TYPE__close_err = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(FOO__TIPS__TIPS_TYPE)
} Foo__Tips__TipsType;

/* --- messages --- */

struct  _Foo__IsOpen
{
  ProtobufCMessage base;
  Foo__IsOpen__IsOpenType isopen_type;
};
#define FOO__IS_OPEN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&foo__is_open__descriptor) \
    , FOO__IS_OPEN__IS_OPEN_TYPE__null }


struct  _Foo__Tips
{
  ProtobufCMessage base;
  Foo__Tips__TipsType tipstype;
};
#define FOO__TIPS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&foo__tips__descriptor) \
    , FOO__TIPS__TIPS_TYPE__null }


/* Foo__IsOpen methods */
void   foo__is_open__init
                     (Foo__IsOpen         *message);
size_t foo__is_open__get_packed_size
                     (const Foo__IsOpen   *message);
size_t foo__is_open__pack
                     (const Foo__IsOpen   *message,
                      uint8_t             *out);
size_t foo__is_open__pack_to_buffer
                     (const Foo__IsOpen   *message,
                      ProtobufCBuffer     *buffer);
Foo__IsOpen *
       foo__is_open__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   foo__is_open__free_unpacked
                     (Foo__IsOpen *message,
                      ProtobufCAllocator *allocator);
/* Foo__Tips methods */
void   foo__tips__init
                     (Foo__Tips         *message);
size_t foo__tips__get_packed_size
                     (const Foo__Tips   *message);
size_t foo__tips__pack
                     (const Foo__Tips   *message,
                      uint8_t             *out);
size_t foo__tips__pack_to_buffer
                     (const Foo__Tips   *message,
                      ProtobufCBuffer     *buffer);
Foo__Tips *
       foo__tips__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   foo__tips__free_unpacked
                     (Foo__Tips *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Foo__IsOpen_Closure)
                 (const Foo__IsOpen *message,
                  void *closure_data);
typedef void (*Foo__Tips_Closure)
                 (const Foo__Tips *message,
                  void *closure_data);

/* --- services --- */

typedef struct _Foo__Audio_Service Foo__Audio_Service;
struct _Foo__Audio_Service
{
  ProtobufCService base;
  void (*audio_test)(Foo__Audio_Service *service,
                     const Foo__IsOpen *input,
                     Foo__Tips_Closure closure,
                     void *closure_data);
};
typedef void (*Foo__Audio_ServiceDestroy)(Foo__Audio_Service *);
void foo__audio__init (Foo__Audio_Service *service,
                       Foo__Audio_ServiceDestroy destroy);
#define FOO__AUDIO__BASE_INIT \
    { &foo__audio__descriptor, protobuf_c_service_invoke_internal, NULL }
#define FOO__AUDIO__INIT(function_prefix__) \
    { FOO__AUDIO__BASE_INIT,\
      function_prefix__ ## audio_test  }
void foo__audio__audio_test(ProtobufCService *service,
                            const Foo__IsOpen *input,
                            Foo__Tips_Closure closure,
                            void *closure_data);

/* --- descriptors --- */

extern const ProtobufCMessageDescriptor foo__is_open__descriptor;
extern const ProtobufCEnumDescriptor    foo__is_open__is_open_type__descriptor;
extern const ProtobufCMessageDescriptor foo__tips__descriptor;
extern const ProtobufCEnumDescriptor    foo__tips__tips_type__descriptor;
extern const ProtobufCServiceDescriptor foo__audio__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_esp_5faudiotest_2eproto__INCLUDED */
